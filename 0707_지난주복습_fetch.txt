1. 모든 데이터 가져오기
const response = await fetch(API_BASE_URL);

=>※todos 상태값을 db에서 조회한 모든값으로 저장


2. id로 지정한 번호의 데이터를 checked수정(몽고 db 값 변경)
const options = {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ checked: newChecked }),
      };
      const response = await fetch(`${API_BASE_URL}/${id}`, options);

=>※ db를 변경하고 화면도 바꿔줘야 한다. => todos 상태값 변경
 if (response.ok) {
        // 현재 상태값 변경 => 화면
        const newtodos = todos.map((item) =>
          item.id === id ? { ...item, checked: !item.checked } : item
        );
	setTodos(newtodos);
3. id로 지정한 번호의 데이터를 삭제
const resp = await fetch(`${API_BASE_URL}/${id}`, { method: "DELETE" });

/※재렌더링을 위해 상태값 todos 변경
fetchTodos() ==> 방법1) 다시 전체를 가져오기 위한 fetch요청 함수 실행
                   ==>   t.id!== id)    : 방법2) filter 메소드로 걸러내기

4. 새로운 데이터 추가(id값을 만들어주기)
 const options = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text: text }), //"{\"text\":\"노션 학습\"}" => json 문자열
      };
      //"{\"text\":\"노션 학습\"}" => json 문자열(데이터를 송수신할 때 문자열로 합니다.)
      //JSON.stringify : JS 객체{text:"과제하기"}를 json 문자열로 변환
const response = await fetch(API_BASE_URL, options);

//todos 상태값을 변경할 때 요청의 응답값을 추가. nodejs에서 추가한 데이터를 보내줌
const newTodo = await response.json();
        setTodos([...todos, newTodo]); ///새로운 배열을 만들 때, 원래 todos 복사 newTodo추가
                                                 // setTodos(todos.concat(newTodo)



공통적으로 바뀌는 state 상태값을 찾아보세요. => todos 배열 ※표시로 설명